2016-06-29 02:32:13,803 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:32:13,816 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:32:13,828 ERROR by.epam.parsing.action.TextParser [main] Cannot add parsed lexeme to text by.epam.parsing.exception.ParserException: Cannot parse lexeme
	at by.epam.parsing.action.TextParser.createLexeme(TextParser.java:82)
	at by.epam.parsing.action.TextParser.parseSentence(TextParser.java:63)
	at by.epam.parsing.action.TextParser.parseParagraph(TextParser.java:48)
	at by.epam.parsing.action.TextParser.parseText(TextParser.java:33)
	at by.epam.parsing.util.Main.main(Main.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)

2016-06-29 02:32:13,830 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:32:13,831 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:33:52,425 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:33:52,498 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:33:52,521 ERROR by.epam.parsing.action.TextParser [main] Cannot add parsed lexeme to text by.epam.parsing.exception.ParserException: Cannot parse lexeme: undefined;
	at by.epam.parsing.action.TextParser.createLexeme(TextParser.java:82)
	at by.epam.parsing.action.TextParser.parseSentence(TextParser.java:63)
	at by.epam.parsing.action.TextParser.parseParagraph(TextParser.java:48)
	at by.epam.parsing.action.TextParser.parseText(TextParser.java:33)
	at by.epam.parsing.util.Main.main(Main.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)

2016-06-29 02:33:52,523 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:33:52,542 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:34:06,276 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:34:06,450 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:35:14,280 ERROR by.epam.parsing.action.TextParser [main] Cannot add parsed lexeme to text by.epam.parsing.exception.ParserException: Cannot parse lexeme: undefined;
	at by.epam.parsing.action.TextParser.createLexeme(TextParser.java:82)
	at by.epam.parsing.action.TextParser.parseSentence(TextParser.java:63)
	at by.epam.parsing.action.TextParser.parseParagraph(TextParser.java:48)
	at by.epam.parsing.action.TextParser.parseText(TextParser.java:33)
	at by.epam.parsing.util.Main.main(Main.java:23)

2016-06-29 02:35:14,284 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:35:14,286 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:35:19,426 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:35:19,440 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:35:19,450 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:35:19,460 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:36:15,657 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:36:15,666 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:36:15,681 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:36:15,682 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:36:15,684 INFO  by.epam.parsing.util.Main [main] Result:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
2016-06-29 02:37:36,753 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:37:36,764 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:37:36,780 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:37:36,782 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:37:36,783 INFO  by.epam.parsing.util.Main [main] Result:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
2016-06-29 02:37:45,255 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:37:45,267 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:37:45,276 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:39:00,054 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:39:00,108 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:39:00,752 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:39:00,753 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:39:03,405 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:39:03,406 INFO  by.epam.parsing.util.Main [main] Result:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
2016-06-29 02:39:06,635 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:39:06,648 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:43:31,445 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:43:31,447 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:43:31,447 INFO  by.epam.parsing.util.Main [main] Result:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
2016-06-29 02:43:37,315 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:43:37,333 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:44:19,354 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:44:19,637 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:44:19,638 INFO  by.epam.parsing.util.Main [main] Result:
An engine that performs match operations on a character sequence by interpreting a Pattern. 


A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations: 


The matches method attempts to match the entire input sequence against the pattern. 


The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern. 


The find method scans the input sequence looking for the next subsequence that matches the pattern. 


Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher. 


A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details. 


This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 


The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form. 


The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 

 
2016-06-29 02:45:22,302 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:45:22,329 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:45:54,337 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:45:54,362 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 02:46:17,652 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 02:46:22,161 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 02:46:22,161 INFO  by.epam.parsing.util.Main [main] Result:
An engine that performs match operations on a character sequence by interpreting a Pattern. 









 
2016-06-29 02:47:43,709 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 02:47:43,744 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 04:09:31,838 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-06-29 04:09:31,856 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-06-29 04:09:31,867 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-06-29 04:09:31,889 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-06-29 04:09:31,889 INFO  by.epam.parsing.util.Main [main] Result:
An engine that performs match operations on a character sequence by interpreting a Pattern. 
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations: 
The matches method attempts to match the entire input sequence against the pattern. 
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern. 
The find method scans the input sequence looking for the next subsequence that matches the pattern. 
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher. 
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details. 
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form. 
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
