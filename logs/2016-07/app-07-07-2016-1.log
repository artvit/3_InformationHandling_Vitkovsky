2016-07-07 01:31:58,008 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-07-07 01:31:58,064 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-07-07 01:31:58,074 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-07-07 01:31:58,237 INFO  by.epam.parsing.util.Main [main] Result list:
by.epam.parsing.composite.Composite@3cb1ffe6
by.epam.parsing.composite.Composite@3dfc5fb8
by.epam.parsing.composite.Composite@467aecef
by.epam.parsing.composite.Composite@4d50efb8
by.epam.parsing.composite.Composite@7e2d773b
by.epam.parsing.composite.Composite@2173f6d9
by.epam.parsing.composite.Composite@307f6b8c
by.epam.parsing.composite.Composite@7a187f14
by.epam.parsing.composite.Composite@6f195bc3
by.epam.parsing.composite.Composite@51e2adc7 
2016-07-07 01:31:58,239 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-07-07 01:35:02,377 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-07-07 01:35:02,447 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-07-07 01:35:02,463 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-07-07 01:35:02,598 INFO  by.epam.parsing.util.Main [main] Result list:
The matches method attempts to match the entire input sequence against the pattern.
An engine that performs match operations on a character sequence by interpreting a Pattern.
The find method scans the input sequence looking for the next subsequence that matches the pattern.
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern.
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher.
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation.
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form.
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details.
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
2016-07-07 01:35:02,598 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-07-07 01:37:32,350 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-07-07 01:37:32,359 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-07-07 01:37:32,372 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-07-07 01:37:32,516 INFO  by.epam.parsing.util.Main [main] Result list:
The matches method attempts to match the entire input sequence against the pattern.
An engine that performs match operations on a character sequence by interpreting a Pattern.
The find method scans the input sequence looking for the next subsequence that matches the pattern.
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern.
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher.
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation.
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form.
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details.
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
2016-07-07 01:37:32,516 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-07-07 01:38:35,977 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-07-07 01:38:35,999 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-07-07 01:38:36,026 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-07-07 01:38:36,183 INFO  by.epam.parsing.util.Main [main] Result list:
The matches method attempts to match the entire input sequence against the pattern.
An engine that performs match operations on a character sequence by interpreting a Pattern.
The find method scans the input sequence looking for the next subsequence that matches the pattern.
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern.
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher.
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation.
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form.
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details.
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
2016-07-07 01:38:36,184 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-07-07 01:38:36,188 INFO  by.epam.parsing.util.Main [main] Result:
An engine that performs match operations on a character sequence by interpreting a Pattern. 
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations: 
The matches method attempts to match the entire input sequence against the pattern. 
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern. 
The find method scans the input sequence looking for the next subsequence that matches the pattern. 
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher. 
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details. 
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form. 
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
2016-07-07 01:39:30,684 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-07-07 01:39:30,694 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-07-07 01:39:30,706 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-07-07 01:39:30,823 INFO  by.epam.parsing.util.Main [main] Result list:
The matches method attempts to match the entire input sequence against the pattern.
An engine that performs match operations on a character sequence by interpreting a Pattern.
The find method scans the input sequence looking for the next subsequence that matches the pattern.
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern.
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher.
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation.
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form.
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details.
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
2016-07-07 01:40:16,110 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-07-07 01:40:16,114 INFO  by.epam.parsing.util.Main [main] Result:
An engine that performs match operations on a character sequence by interpreting a Pattern. 
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations: 
The matches method attempts to match the entire input sequence against the pattern. 
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern. 
The find method scans the input sequence looking for the next subsequence that matches the pattern. 
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher. 
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details. 
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form. 
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
2016-07-07 01:42:47,017 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-07-07 01:42:47,030 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-07-07 01:42:47,046 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-07-07 01:42:47,212 INFO  by.epam.parsing.util.Main [main] Result list:
The matches method attempts to match the entire input sequence against the pattern.
An engine that performs match operations on a character sequence by interpreting a Pattern.
The find method scans the input sequence looking for the next subsequence that matches the pattern.
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern.
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher.
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations:
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation.
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form.
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details.
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
2016-07-07 02:08:07,903 INFO  by.epam.parsing.util.Main [main] File has been read successfully 
2016-07-07 02:08:07,953 INFO  by.epam.parsing.util.Main [main] Text parser has been created 
2016-07-07 02:08:07,977 INFO  by.epam.parsing.util.Main [main] Text has been parsed 
2016-07-07 02:08:08,103 INFO  by.epam.parsing.util.Main [main] Result list:
See useAnchoringBounds and useTransparentBounds for more details.
Each of these methods returns a boolean indicating success or failure.
The explicit state of a matcher is recomputed by every match operation.
The matches method attempts to match the entire input sequence against the pattern.
A matcher finds matches in a subset of its input called the region.
By default, the region contains all of the matcher' s input.
An engine that performs match operations on a character sequence by interpreting a Pattern.
The way that the region boundaries interact with some pattern constructs can be changed.
A matcher is created from a pattern by invoking the pattern' s matcher method.
Once created, a matcher can be used to perform three different kinds of match operations:
The find method scans the input sequence looking for the next subsequence that matches the pattern.
More information about a successful match can be obtained by querying the state of the matcher.
The region can be modified via theregion method and queried via the regionStart and regionEnd methods.
As a convenience, methods are also provided for returning these captured subsequences in string form.
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern.
The explicit state of a matcher includes the start and end indices of the most recent successful match.
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result.
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown.
It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences.
The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
2016-07-07 02:08:08,104 INFO  by.epam.parsing.util.Main [main] Text reporter has been created 
2016-07-07 02:08:08,108 INFO  by.epam.parsing.util.Main [main] Result:
An engine that performs match operations on a character sequence by interpreting a Pattern. 
A matcher is created from a pattern by invoking the pattern' s matcher method. Once created, a matcher can be used to perform three different kinds of match operations: 
The matches method attempts to match the entire input sequence against the pattern. 
The lookingAt method attempts to match the input sequence, starting at the beginning, against the pattern. 
The find method scans the input sequence looking for the next subsequence that matches the pattern. 
Each of these methods returns a boolean indicating success or failure. More information about a successful match can be obtained by querying the state of the matcher. 
A matcher finds matches in a subset of its input called the region. By default, the region contains all of the matcher' s input. The region can be modified via theregion method and queried via the regionStart and regionEnd methods. The way that the region boundaries interact with some pattern constructs can be changed. See useAnchoringBounds and useTransparentBounds for more details. 
This class also defines methods for replacing matched subsequences with new strings whose contents can, if desired, be computed from the match result. The appendReplacement and appendTail methods can be used in tandem in order to collect the result into an existing string buffer, or the more convenient replaceAll method can be used to create a string in which every matching subsequence in the input sequence is replaced. 
The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each capturing group in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form. 
The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an IllegalStateException to be thrown. The explicit state of a matcher is recomputed by every match operation. 
 
